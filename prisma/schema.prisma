generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define user roles enum
enum UserRole {
  CUSTOMER
  MIDDLEMAN
  SHOPKEEPER
  MANUFACTURER
  ADMIN
}

model Manufacturer {
  id                Int                @id @default(autoincrement())
  name              String
  logo              String?
  categories        String[]
  rating            Float
  deliveryTime      String
  userId            String?            @unique // Link to User model
  orders            Order[]
  middleMenRelation middleMenRelation?
  products          myProduct[]
  user              User?              @relation(fields: [userId], references: [id])
}

model myProduct {
  id             Int          @id @default(autoincrement())
  manufacturerId Int
  name           String
  skuId          Int
  category       String
  price          Float
  minOrder       Int          @default(1)
  inStock        Boolean      @default(false)
  batches        batches[]
  inventory      inventory[]
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  orderItem      orderItem[]
}

model batches {
  id              Int              @id @default(autoincrement())
  skuId           Int
  batchNumber     String
  manufactureDate DateTime         @db.Date
  expiryDate      DateTime         @db.Date
  quantity        Int
  InventoryBatch  InventoryBatch[]
  product         myProduct        @relation(fields: [skuId], references: [id])
}

model Order {
  id                  String             @id @default(uuid())
  manufacturerId      Int
  date                DateTime           @db.Date
  total               Float              @default(0)
  status              orderStatus        @default(PENDING)
  middleMenRelationid Int?
  shopkeeperId        Int?
  manufacturer        Manufacturer       @relation(fields: [manufacturerId], references: [id])
  middleMenRelation   middleMenRelation? @relation(fields: [middleMenRelationid], references: [id])
  shopkeeper          shopkeeper?        @relation(fields: [shopkeeperId], references: [id])
  orderItem           orderItem[]
}

model orderItem {
  id         Int       @id @default(autoincrement())
  orderId    String
  productId  Int
  quantity   Int
  price      Float
  totalPrice Float     @default(0)
  order      Order     @relation(fields: [orderId], references: [id])
  product    myProduct @relation(fields: [productId], references: [id])
}

model middleMen {
  id                Int                 @id @default(autoincrement())
  name              String
  logo              String?
  categories        String[]
  rating            Float
  deliveryTime      String
  userId            String?             @unique // Link to User model
  middleMenRelation middleMenRelation[]
  user              User?               @relation(fields: [userId], references: [id])
}

model middleMenRelation {
  id             Int          @id @default(autoincrement())
  middleMenId    Int
  deliveryTime   String
  isApproved     Boolean      @default(false)
  manufacturerId Int          @unique
  orders         Order[]
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  middleMen      middleMen    @relation(fields: [middleMenId], references: [id])
}

model shopkeeper {
  id           Int        @id @default(autoincrement())
  name         String
  categories   String[]
  rating       Float
  deliveryTime String
  userId       String?    @unique // Link to User model
  orders       Order[]
  billing      billing[]
  shopItem     shopItem[]
  user         User?      @relation(fields: [userId], references: [id])
}

model shopItem {
  id           Int        @id @default(autoincrement())
  shopkeeperId Int
  name         String
  category     String
  brand        String
  inventoryId  Int?       @unique
  price        Float
  billItem     billItem[]
  inventory    inventory?
  shopkeeper   shopkeeper @relation(fields: [shopkeeperId], references: [id])
}

model inventory {
  id               Int              @id @default(autoincrement())
  skuId            Int?
  quantity         Int
  shopItemId       Int              @unique
  inventoryBatches InventoryBatch[]
  shopItem         shopItem         @relation(fields: [shopItemId], references: [id], onDelete: Cascade)
  product          myProduct?       @relation(fields: [skuId], references: [id], onDelete: Cascade)
}

model InventoryBatch {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  batchId     Int?
  expiryDate  DateTime? @db.Date
  quantity    Int
  batch       batches?  @relation(fields: [batchId], references: [id])
  inventory   inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
}

model billing {
  id            Int        @id @default(autoincrement())
  shopkeeperId  Int
  amount        Float
  paymentMethod String
  invoice       String?
  invoiceDate   DateTime   @db.Date
  customerId    Int?
  billItem      billItem[]
  customer      customer?  @relation(fields: [customerId], references: [id])
  shopkeeper    shopkeeper @relation(fields: [shopkeeperId], references: [id])
}

model billItem {
  id         Int      @id @default(autoincrement())
  billingId  Int
  shopitemId Int
  quantity   Int
  price      Float
  totalPrice Float    @default(0)
  billing    billing  @relation(fields: [billingId], references: [id])
  shopitem   shopItem @relation(fields: [shopitemId], references: [id])
}

model customer {
  id      Int       @id @default(autoincrement())
  name    String
  mobile  String    @unique
  tier    String    @default("Bronze")
  userId  String?   @unique // Link to User model
  billing billing[]
  user    User?     @relation(fields: [userId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole?     // User role
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  manufacturer  Manufacturer?
  middleMen     middleMen?
  shopkeeper    shopkeeper?
  customer      customer?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum orderStatus {
  PENDING
  SHIPPED
  DELIVERED
  REJECTED
  APPROVED
}